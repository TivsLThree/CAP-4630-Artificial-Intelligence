{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "HW2P3.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyN9/oNiXhGl5IZJ4u9uKeqI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TivsLThree/CAP-4630-Artificial-Intelligence/blob/master/Homwork/HW2/HW2P3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HlCdJk2LPozM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%tensorflow_version 2.x\n",
        "%matplotlib inline\n",
        "import tensorflow as tf\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()\n",
        "train_images = train_images.astype('float64') / 255\n",
        "test_images = test_images.astype('float64') / 255"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n6SDpL_8QZ3q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def sort(images, labels):\n",
        "  size = len(images)\n",
        "  results = [np.empty((28,28)) for x in range(0,10)]\n",
        "  sizes = [0,0,0,0,0,0,0,0,0,0]\n",
        "  for i in range(0, size): \n",
        "      results[labels[i]] += (images[i]);\n",
        "      sizes[labels[i]] += 1;\n",
        "  #print(sizes)\n",
        "  for i in range(0, 10):\n",
        "    results[i] /= sizes[i]\n",
        "  return results"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U5N8qElbTmT7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "324d9d3a-e971-449e-ccee-4ea681bec9f9"
      },
      "source": [
        "digit_0 = train_images[0]\n",
        "\n",
        "plt.figure(figsize=(4, 4))\n",
        "plt.imshow(digit_0)\n",
        "plt.show()"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAOZ0lEQVR4nO3dbYxc5XnG8euKbezamMQbB9chLjjg\nFAg0Jl0ZEBZQobgOqgSoCsSKIkJpnSY4Ca0rQWlV3IpWbpUQUUqRTHExFS+BBIQ/0CTUQpCowWWh\nBgwEDMY0NmaNWYENIX5Z3/2w42iBnWeXmTMv3vv/k1Yzc+45c24NXD5nznNmHkeEAIx/H+p0AwDa\ng7ADSRB2IAnCDiRB2IEkJrZzY4d5ckzRtHZuEkjlV3pbe2OPR6o1FXbbiyVdJ2mCpH+LiJWl50/R\nNJ3qc5rZJICC9bGubq3hw3jbEyTdIOnzkk6UtMT2iY2+HoDWauYz+wJJL0TE5ojYK+lOSedV0xaA\nqjUT9qMk/WLY4621Ze9ie6ntPtt9+7Snic0BaEbLz8ZHxKqI6I2I3kma3OrNAaijmbBvkzRn2ONP\n1JYB6ELNhP1RSfNsz7V9mKQvSlpbTVsAqtbw0FtE7Le9TNKPNDT0tjoinq6sMwCVamqcPSLul3R/\nRb0AaCEulwWSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnCDiRB\n2IEkCDuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiCJpmZx\nRffzxPJ/4gkfm9nS7T/3F8fUrQ1OPVBc9+hjdxTrU7/uYv3Vaw+rW3u893vFdXcOvl2sn3r38mL9\nuD9/pFjvhKbCbnuLpN2SBiXtj4jeKpoCUL0q9uy/FxE7K3gdAC3EZ3YgiWbDHpJ+bPsx20tHeoLt\npbb7bPft054mNwegUc0exi+MiG22j5T0gO2fR8TDw58QEaskrZKkI9wTTW4PQIOa2rNHxLba7Q5J\n90paUEVTAKrXcNhtT7M9/eB9SYskbayqMQDVauYwfpake20ffJ3bI+KHlXQ1zkw4YV6xHpMnFeuv\nnPWRYv2d0+qPCfd8uDxe/JPPlMebO+k/fzm9WP/Hf1lcrK8/+fa6tZf2vVNcd2X/54r1j//k0PtE\n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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i_p-Qn0UUfF-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        },
        "outputId": "d2225a55-0e08-485e-f2bc-faa0cb68dc45"
      },
      "source": [
        "results = sort(train_images, train_labels);\n",
        "plt.figure(figsize=(4,4))\n",
        "average = results[9]; # Choose an index here to display.\n",
        "plt.imshow(average)\n",
        "plt.show() # For some reason the display can be corrupted the first few times it is run. I don't know why"
      ],
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: RuntimeWarning: invalid value encountered in add\n",
            "  \n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[5923, 6742, 5958, 6131, 5842, 5421, 5918, 6265, 5851, 5949]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}